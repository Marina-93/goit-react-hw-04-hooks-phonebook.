{"version":3,"sources":["components/Section/Section.js","components/Form/Form.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["Section","title","children","className","Form","onSubmit","useState","name","setNeme","number","setNumber","handleChange","e","target","value","reset","preventDefault","type","onChange","pattern","required","ContactList","contacts","onDelete","map","id","onClick","Filter","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","filterSearch","normalizedFilter","toLowerCase","contact","includes","getFilterSearch","friendName","some","alert","list","shortid","generate","prev","nameId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b63eca1a.chunk.js","sourcesContent":["import propTypes from \"prop-types\";\r\nimport './Section.css'\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </section>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: propTypes.string,\r\n  children: propTypes.any,\r\n}\r\n","import { useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './Form.css'\r\n\r\nexport default function Form({onSubmit}) {\r\n    const [name, setNeme] = useState('')\r\n    const [number, setNumber] = useState('')\r\n\r\n    const handleChange = (e) => {\r\n        switch (e.target.name) {\r\n            case 'name':\r\n                setNeme(e.target.value)\r\n                break\r\n            case 'number':\r\n                setNumber(e.target.value)\r\n                break\r\n            default: return\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        onSubmit({ name, number })\r\n        reset()\r\n    }\r\n\r\n    const reset = () => {\r\n        setNeme('')\r\n        setNumber('')\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"form\">\r\n            <label className=\"label\">\r\n                Имя\r\n                <input\r\n                    className=\"input\"\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                />\r\n            </label>\r\n            \r\n            <label className=\"label\">\r\n                Телефона\r\n                <input\r\n                    className=\"input\"\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                />\r\n            </label>\r\n            \r\n            <button className=\"button\" type=\"submit\">Add contact</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nForm.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.number,\r\n    handleChange: PropTypes.func,\r\n    handleSubmit: PropTypes.func\r\n}","import PropTypes from \"prop-types\";\r\nimport './ContactList.css'\r\n\r\nexport default function ContactList({ contacts, onDelete }) {\r\n  return (\r\n    <ul className=\"list\">\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name}: {number}\r\n          <button\r\n            className=\"button-list\"\r\n            type=\"button\"\r\n            onClick={() => onDelete(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\n\r\nContactList.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number\r\n}","import PropTypes from \"prop-types\";\r\nimport './Filter.css'\r\n\r\nexport default function Filter ({ value, onChange }){\r\n  return (\r\n    <label className=\"filter-label\">\r\n      Find contacts by name\r\n      <input\r\n        className=\"filter-input\"\r\n        value={value}\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n    </label>\r\n  )\r\n}\r\n\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func\r\n}","import { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport Section from './components/Section/Section';\nimport Form from './components/Form/Form';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport './App.css'\n\n\n           \nexport default function App() {\n  const [contacts, setContacts] = useState(\n    JSON.parse(window.localStorage.getItem('contacts')) ??\n    [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ]\n  )\n  const [filter, setFilter] = useState('')\n\n  const formSubmit = ({ name, number }) => {\n    const friendName = name;\n    if (contacts.some(({ name }) => name === friendName)) {\n      alert(`${name} is already in contact`);\n      return;\n    }\n    \n    const list = {\n      id: shortid.generate(),\n      name,\n      number,\n    }\n\n    setContacts((prev ) => [...prev, list])\n  }\n\n  const changeFilter = (e) => {\n    setFilter(e.target.value );\n  }\n\n  const getFilterSearch = () => {\n    const normalizedFilter = filter.toLowerCase();\n    \n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    )\n  }\n\n  const deleteContact = (nameId) => {\n    setContacts((prev) => (prev.filter((contact) => contact.id !== nameId)))\n  }\n\n  useEffect(() => {window.localStorage.setItem('contacts', JSON.stringify(contacts))\n  }, [contacts])\n\n  const filterSearch = getFilterSearch();\n  return (\n      <div className=\"conteiner\">\n        <Section title=\"Phonebook\">\n          <Form onSubmit={formSubmit} />\n        </Section>\n        <Section title=\"Contacts\">\n          <Filter\n            value={filter}\n            onChange={changeFilter}\n          />\n          <ContactList\n            contacts={filterSearch}\n            onDelete={deleteContact}\n          />\n        </Section>\n      </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}